{"version":3,"sources":["Services/ConfigProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;YAGA;gBAAA;oBAEI,qBAAgB,GAAG,KAAK,CAAA;oBAExB,WAAM,GAAW,CAAC,CAAA;oBAClB,YAAO,GAAW,MAAM,CAAA;oBACxB,SAAI,GAAW,CAAC,CAAA;oBAChB,cAAS,GAAW,oBAAoB,CAAA;oBACxC,6CAA6C;oBAC7C,yBAAoB,GAAY,IAAI,CAAC;oBACrC,cAAS,GAAa,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;oBAC9C,QAAG,GAAW,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;oBACnC,YAAO,GAAW,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAA;gBA+B3I,CAAC;gBA3BG,iBAAiB;gBACT,kCAAS,GAAjB,UAAkB,IAAY;oBAC1B,IAAI,EAAE,GAAkB,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBACnD,IAAI,KAAK,GAAW,EAAE,CAAC,MAAM,CAAC;oBAC9B,IAAI,UAAU,GAAG,IAAI,GAAG,GAAG,CAAC;oBAC5B,IAAI,CAAS,CAAC;oBAEd,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;wBACxC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;wBAChC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BAC7B,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;wBACpD,CAAC;oBACL,CAAC;oBACD,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBAEO,qCAAY,GAApB,UAAqB,IAAI;oBACrB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjC,CAAC;gBAEO,kCAAS,GAAjB,UAAkB,IAAY,EAAE,KAAa,EAAE,UAAkB,EAAE,IAAiB;oBAAjB,oBAAiB,GAAjB,SAAiB;oBAChF,IAAI,CAAC,GAAS,IAAI,IAAI,EAAE,CAAC;oBACzB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,EAAE,GAAG,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;oBAC1D,IAAI,OAAO,GAAW,UAAU,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;oBACnD,QAAQ,CAAC,MAAM,GAAG,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,IAAI,GAAG,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;gBACtG,CAAC;gBA1CL;oBAAC,iBAAU,EAAE;;kCAAA;gBA4Cb,qBAAC;YAAD,CA3CA,AA2CC,IAAA;YA3CD,2CA2CC,CAAA","file":"Services/ConfigProvider.js","sourcesContent":["import {Injectable} from 'angular2/core'\r\n\r\n@Injectable()\r\nexport class ConfigProvider {\r\n\r\n    enableMockObject = false\r\n\r\n    gameId: number = 3\r\n    channel: string = 'test'\r\n    mode: number = 0\r\n    serverUrl: string = 'http://jok.io:8082'\r\n    //serverUrl: string = 'http://localhost:3000'\r\n    enableMessageLogging: boolean = true;\r\n    protocols: string[] = ['polling', 'websocket']\r\n    sid: string = this.getCookie('sid')\r\n    playUrl: string = location.origin + location.pathname + (location.pathname.lastIndexOf('/') == location.pathname.length - 1 ? '' : '/')\r\n    currentUserId: number\r\n\r\n\r\n    //#region Cookies\r\n    private getCookie(name: string) {\r\n        let ca: Array<string> = document.cookie.split(';');\r\n        let caLen: number = ca.length;\r\n        let cookieName = name + \"=\";\r\n        let c: string;\r\n\r\n        for (let i: number = 0; i < caLen; i += 1) {\r\n            c = ca[i].replace(/^\\s\\+/g, \"\");\r\n            if (c.indexOf(cookieName) == 0) {\r\n                return c.substring(cookieName.length, c.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    private deleteCookie(name) {\r\n        this.setCookie(name, \"\", -1);\r\n    }\r\n\r\n    private setCookie(name: string, value: string, expireDays: number, path: string = \"\") {\r\n        let d: Date = new Date();\r\n        d.setTime(d.getTime() + expireDays * 24 * 60 * 60 * 1000);\r\n        let expires: string = \"expires=\" + d.toUTCString();\r\n        document.cookie = name + \"=\" + value + \"; \" + expires + (path.length > 0 ? \"; path=\" + path : \"\");\r\n    }\r\n    //#endregion\r\n}\r\n"],"sourceRoot":"/Source"}